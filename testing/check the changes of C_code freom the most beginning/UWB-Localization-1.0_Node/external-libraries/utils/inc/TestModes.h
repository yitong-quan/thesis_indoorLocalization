#ifndef UTILS_TESTMODES_H_
#define UTILS_TESTMODES_H_

#include "config.h"
#include "revisionDef.h"

#if (REVISION == IDENTIFIER_REV_1) || (REVISION == IDENTIFIER_REV_2) || (REVISION == IDENTIFIER_REV_3) || (REVISION == TABLE_REV_1)

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <math.h>

#include "HWinit.h"
#include "em_chip.h"
#include "em_cmu.h"
#include "em_emu.h"
#include "em_timer.h"
#include "em_gpio.h"
#include "em_leuart.h"

#include "AS3933.h"
#include "ANTENNA.h"
#include "CC1101.h"
#include "RADIO.h"
#include "RADIO_CONFIG.h"
#include "RFPACKETHELPER.h"
#include "WORKMODES.h"
#include "UART.h"
#include "RTC.h"
#include "DMA_LEUART.h"
#include "TIMER.h"
#include "CRC.h"
#include "MISC.h"
#include "DWM1000.h"

#include "config.h"

/* Defines */

//Test pattern defined by ITU-T Recommendation O.153, also mentioned in ETSI EN 300 220:
static uint8_t testPattern[511] = { 0x21, 0x86, 0x9C, 0x6A, 0xD8, 0xCB, 0x4E,
		0x14, 0x6A, 0xF9, 0x9A, 0xA4, 0x7D, 0xC9, 0xCA, 0x0C, 0x18, 0x53, 0x2C,
		0x7D, 0x8B, 0xC6, 0x35, 0xCD, 0xE3, 0xBB, 0x60, 0x6D, 0x37, 0x68, 0x7D,
		0x55, 0xA0, 0xD4, 0xD3, 0x1D, 0x38, 0x97, 0xBC, 0xAE, 0x48, 0x98, 0x43,
		0x6F, 0xB3, 0x70, 0x0F, 0xDF, 0x83, 0xF7, 0xD1, 0x99, 0x20, 0xE5, 0x16,
		0xCF, 0x67, 0xA3, 0x12, 0xC7, 0x56, 0x47, 0x46, 0x04, 0x08, 0x31, 0xE4,
		0x54, 0xC3, 0x5E, 0x76, 0xA2, 0x50, 0xCB, 0xD7, 0x24, 0xED, 0x4B, 0x56,
		0x66, 0xC0, 0x98, 0x62, 0xE9, 0x5B, 0x34, 0xAE, 0x69, 0x1E, 0xDF, 0x05,
		0x6B, 0xBB, 0x41, 0xEB, 0xAB, 0x02, 0xA5, 0x9E, 0xEE, 0xC0, 0xB9, 0xE4,
		0x75, 0x45, 0xC2, 0x1C, 0x7A, 0x9B, 0x85, 0x7B, 0xF8, 0x1E, 0xBC, 0x8F,
		0xCE, 0x04, 0x29, 0xB7, 0x78, 0x3E, 0x1B, 0x95, 0x38, 0xB6, 0x3A, 0x32,
		0x22, 0x40, 0x88, 0x21, 0xA7, 0x1A, 0xF6, 0xB2, 0x13, 0x85, 0x5A, 0xBE,
		0x26, 0x69, 0x5F, 0xB2, 0x32, 0x03, 0xC6, 0x14, 0x4B, 0xDF, 0xA2, 0x71,
		0x4D, 0xF3, 0xF8, 0x2E, 0x58, 0xDB, 0x0D, 0x5A, 0x5F, 0x15, 0x28, 0xF5,
		0x74, 0x07, 0xCE, 0x25, 0xAF, 0x2B, 0x12, 0xE6, 0xD0, 0xDB, 0x2C, 0xDC,
		0xC3, 0xF7, 0xE0, 0x7D, 0x74, 0x26, 0x48, 0xB9, 0xC5, 0xF3, 0xD9, 0xA8,
		0xC4, 0xB1, 0xD5, 0x91, 0x11, 0x01, 0x42, 0x0C, 0x39, 0xD5, 0xB0, 0x97,
		0x9D, 0x28, 0xD4, 0xF2, 0x35, 0x49, 0xFB, 0x92, 0x95, 0x19, 0x30, 0xA6,
		0x58, 0xFA, 0x16, 0x8D, 0x6B, 0x9A, 0xC7, 0x77, 0xC1, 0xDA, 0x6E, 0xD0,
		0xFA, 0xAA, 0x40, 0xA9, 0xA7, 0x3B, 0x70, 0x2E, 0x79, 0x5D, 0x91, 0x30,
		0x87, 0xDE, 0x66, 0xE1, 0x1E, 0xBE, 0x07, 0xEF, 0xA3, 0x33, 0x41, 0xCA,
		0x2D, 0x9E, 0xCF, 0x46, 0x25, 0x8E, 0xAD, 0x8E, 0x8C, 0x08, 0x10, 0x62,
		0xC8, 0xA9, 0x86, 0xBD, 0xEC, 0x44, 0xA1, 0x96, 0xAF, 0x49, 0xDA, 0x97,
		0xAC, 0xCC, 0x80, 0x31, 0xC5, 0xD2, 0xB7, 0x68, 0x5C, 0xD3, 0x3C, 0xBE,
		0x0B, 0xD6, 0x76, 0x83, 0xD6, 0x57, 0x05, 0x4A, 0x3D, 0xDD, 0x81, 0x73,
		0xC9, 0xEB, 0x8A, 0x84, 0x39, 0xF4, 0x36, 0x0B, 0xF7, 0xF0, 0x3D, 0x78,
		0x1F, 0x9D, 0x09, 0x52, 0x6E, 0xF1, 0x7C, 0x36, 0x2A, 0x71, 0x6C, 0x75,
		0x64, 0x44, 0x80, 0x10, 0x43, 0x4E, 0x35, 0xEC, 0x65, 0x27, 0x0A, 0xB5,
		0x7C, 0x4D, 0xD2, 0xBE, 0x64, 0x65, 0x06, 0x8C, 0x29, 0x96, 0xBE, 0x45,
		0xE3, 0x9A, 0xE6, 0xF1, 0x5D, 0xB0, 0xB6, 0x1B, 0xB4, 0xBE, 0x2A, 0x50,
		0xEA, 0xE9, 0x0E, 0x9C, 0x4B, 0x5E, 0x57, 0x24, 0xCC, 0xA1, 0xB7, 0x59,
		0xB8, 0x87, 0xEF, 0xC1, 0xFB, 0xE8, 0x4C, 0x90, 0x72, 0x8B, 0xE7, 0xB3,
		0x51, 0x89, 0x63, 0xAB, 0x23, 0x23, 0x02, 0x84, 0x18, 0x72, 0xAA, 0x61,
		0x2F, 0x3B, 0x51, 0xA8, 0xE5, 0x6B, 0x92, 0xF6, 0x25, 0x2B, 0x33, 0x60,
		0x4C, 0xB1, 0xF4, 0x2D, 0x1A, 0xD7, 0x34, 0x8F, 0xEF, 0x82, 0xB5, 0xDD,
		0xA0, 0xF5, 0x55, 0x81, 0x52, 0x4F, 0x77, 0xE0, 0x5C, 0xF2, 0xBA, 0x22,
		0x61, 0x0E, 0xBD, 0xCD, 0xC2, 0x3D, 0x7C, 0x0F, 0xDE, 0x47, 0x67, 0x82,
		0x94, 0x5B, 0x3C, 0x9F, 0x8D, 0x4A, 0x1C, 0x5B, 0x1D, 0x19, 0x11, 0x20,
		0xC4, 0x90, 0x53, 0x0D, 0x7B, 0xD9, 0x89, 0x42, 0x2D, 0x5F, 0x93, 0xB4,
		0x2F, 0x59, 0x99, 0x01, 0x63, 0x8A, 0xA5, 0x6F, 0xD1, 0xB8, 0xA6, 0x79,
		0x7C, 0x17, 0xAC, 0xED, 0x06, 0xAD, 0xAF, 0x0A, 0x94, 0x7A, 0xBA, 0x03,
		0xE7, 0x92, 0xD7, 0x15, 0x09, 0x73, 0xE8, 0x6D, 0x16, 0xEE, 0xE1, 0x7B,
		0xF0, 0x3E, 0x3A, 0x13, 0xA4, 0xDC, 0xE2, 0xF9, 0x6C, 0x54, 0xE2, 0xD8,
		0xEA, 0xC8, 0x88, 0x00 };


// Test pattern for alternating transmission of 1 and 0 bits:
static uint8_t testPattern2[511] = { 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA };

// Look Up Table for distance (index is rssi value in dBm)
static uint16_t lut_distance[] = {4, 4, 5, 6, 6, 7, 8, 9, 10, 12, 13, 15, 17, 19,
		21, 24, 27, 30, 34, 38, 43, 48, 54, 61, 69, 77, 86, 97, 109, 122, 137,
		154, 173, 194, 218, 244, 274, 308, 345, 388, 435, 488, 548, 615, 690, 774,
		868, 974, 1093, 1227, 1376};

static uint8_t carrierPAtable[8] = { 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0,
		0xC0 };

/* Function prototypes */
void TESTMODE_enter(struct radio_transfer *xfer);

void spectralTestEN300220(struct radio_transfer *xfer, uint8_t config,
		uint8_t * powerConfig);

void spectralTestPreamble(struct radio_transfer *xfer, uint8_t config,
		uint8_t * powerConfig);

void spectralTestWakeUp(struct radio_transfer *xfer, uint8_t config,
		uint8_t * powerConfig);

void spectralTestCarrier(struct radio_transfer *xfer, uint8_t config,
		uint8_t * powerConfig);

void wakeUpTestTransmit(struct radio_transfer *xfer, uint8_t config,
		uint8_t * powerConfig);

void wakeUpTestReceive();

void wakeUpTestSensitivity();

void spectralTestHFCarrier(struct radio_transfer *xfer, uint8_t config,
		uint8_t * powerConfig);

void AS_optimization_transmitter(struct radio_transfer *xfer, uint8_t WU_config,
		uint8_t * WU_powerConfig, uint16_t max_num_of_packets, bool use_wakeup, bool big_data);

void AS_optimization_receiver(struct radio_transfer *xfer, bool use_wakeup);

void AS_optimization_basestation(struct radio_transfer *xfer);

void TEST_WDOG(void);

void testBroadcastTransmitter(struct radio_transfer *xfer, uint8_t config, uint8_t * powerConfig);

void testBroadcastReceiver();

void TEST_data_transmitter(struct radio_transfer *xfer, const uint8_t *key, const uint8_t *iv);

void TEST_data_receiver(struct radio_transfer *xfer, const uint8_t *decrypt_key, const uint8_t *iv);

void TEST_programmer(struct radio_transfer *xfer, const uint8_t *encrypt_key, const uint8_t *decrypt_key, const uint8_t *iv);

void TEST_DWM_UWB_initiator_interrupt();

void TEST_DWM_UWB_responder_interrupt();

void TEST_DWM_UWB_NODE_SLEEP();

void TEST_DWM_NODE_TO_TAG();


// Help functions
void ftoa(char* str, float fnum);
int32_t array_sum(int8_t * array, uint16_t size);
float array_std_deviation(int8_t * array, float avg, uint16_t size);
void CRC_duration(void);

#endif

#endif /* UTILS_TESTMODES_H_ */
